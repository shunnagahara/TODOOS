{"version":3,"sources":["serviceWorker.js","components/Top.jsx","components/Form.jsx","components/TodoList.jsx","components/Validation.jsx","components/Work.jsx","components/Private.jsx","components/DoneList.jsx","components/Done.jsx","components/Menu.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","Top","className","Component","Form","props","onSubmit","handleAdd","name","type","onChange","e","handleChange","disabled","message","title","value","btn","cursor","TodoList","todos","map","todo","i","key","style","onClick","handleRemove","Validation","formValidate","length","Work","target","state","info","setState","bind","lists","localStorage","getItem","JSON","parse","this","preventDefault","push","json","stringify","setItem","splice","workLists","targetList","handleDoneAdd","doneLists","date","Date","today","getFullYear","getMonth","slice","getDate","Object","keys","Private","privateLists","isDisplayDate","DoneList","console","log","Done","sort","a","b","textDecoration","color","Menu","to","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99a26963.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Top extends Component {\n  render() {\n    return (\n      <div className=\"siimple-box siimple--bg-dark\">\n        <h1 className=\"siimple-box-title siimple--color-white\">TODOOS</h1>\n        <div className=\"siimple-rule\"></div>\n        <div className=\"siimple-box siimple--bg-white\">\n          <div>\n            <h3 className=\"siimple--color-black\">Introduction</h3>\n            <div className=\"siimple-rule\"></div>\n            <div className=\"siimple-paragraph siimple-paragraph--lead\">\n            <p>This app is what it manage what you have to do.\n            You can manage work's and private's task.\n            I hope your managing is going to be better than now.</p>\n            </div>\n            <div className=\"siimple-footer-title\">Yours truly,</div>\n            <div className=\"siimple-footer-title\">Shun Nagahara</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nconst Form = (props) => (\n  <form className=\"siimple-form\" onSubmit={props.handleAdd}>\n    <label className=\"siimple-label siimple--color-white\">Your todo:</label>\n    <div className=\"siimple-form-field\">\n        <input name=\"title\" type=\"text\" className=\"siimple-input m-side-5\" onChange={e => props.handleChange(e)}/>\n        <input type=\"submit\" disabled={props.message.title && true} value=\"Add\" className=\"siimple-btn siimple-btn--teal\"/>\n    </div>\n    {props.message.title && (<div className=\"siimple--color-error\">{props.message.title}</div>)}\n  </form>\n);\n\nexport default Form;","import React, { Component } from 'react';\r\n\r\nlet btn = { cursor: 'pointer' };\r\n\r\nconst TodoList = (props) => (\r\n   <div className=\"siimple-list\">\r\n     {props.todos.map((todo, i) => {\r\n       return <div key={i} className=\"siimple-list-item siimple--bg-white\">{todo.title} <span className=\"siimple-tag siimple-tag--success\" style={btn} onClick={() => props.handleRemove(i)}>Done</span></div>\r\n     })};\r\n   </div>\r\n);\r\n\r\nexport default TodoList;","\nconst titleValidation = (title) => {\n   if (title.length === 0) return 'Enter something';\n   if (title.length > 12) return 'Enter using less than 12 capital';\n  return '';\n};\nclass Validation {\n  static formValidate = (type, value) => {\n    switch (type) {\n      case 'title':\n        return titleValidation(value);\n    }\n  };\n}\n\nexport default Validation;","import React, { Component } from 'react';\nimport Form from './Form';\nimport TodoList from  './TodoList';\nimport Validation from './Validation';\n\nexport default class Work extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todo: [],\n      info: {\n        title: '',\n      },\n      message: {\n        title: '',\n      }\n    };\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    // LocalStorageから一覧を取得してstateに保存する\n    let lists = window.localStorage.getItem('work')\n    if (lists) {\n      lists = JSON.parse(lists)\n      this.setState({todo: lists});\n    }\n  }\n  handleChange = (e) => {\n    const key = e.target.name;\n    const value = e.target.value;\n    const { info, message } = this.state;\n\n    this.setState({\n      info: { ...info, [key]: value }\n    });\n    this.setState({\n      message: {\n        ...message,\n        [key]: Validation.formValidate(key, value)\n      }\n    });\n  };\n  // データ保存処理\n  handleAdd(e){\n    // リダイレクト防止\n    e.preventDefault();\n    // フォームから受け取ったデータをオブジェクトに挿入して、stateのtodo配列に追加\n    this.state.todo.push({title: e.target.title.value}); // まだ保存されていない\n    // setStateを使ってstateを上書き\n    this.setState({todo: this.state.todo}); // 保存完了\n    // inputのvalueを空に\n    e.target.title.value = '';\n    // JSON形式でLocalStorageに保存する\n    let json = JSON.stringify(this.state.todo)\n    window.localStorage.setItem('work', json)\n  }\n  // データ削除\n  handleRemove(i){\n    // todo配列からi番目から1つ目のデータを除外\n    this.state.todo.splice(i,1);\n    // setStateでtodo配列を上書き\n    this.setState({todo: this.state.todo});\n    // LocalStorageからデータを取得して対象のlistを削除して保存する\n    let workLists = window.localStorage.getItem('work')\n    workLists = JSON.parse(workLists)\n    let targetList = workLists[i]\n    workLists.splice(i,1);\n    let json = JSON.stringify(workLists)\n    window.localStorage.setItem('work', json)\n    this.handleDoneAdd(targetList[\"title\"])\n  }\n  // done追加処理\n  handleDoneAdd(title){\n    let doneLists = window.localStorage.getItem('done')\n    if (!doneLists) {\n      doneLists = []\n    } else {\n      doneLists = JSON.parse(doneLists)\n    }\n    let date = new Date\n    let today = date.getFullYear() + '-' + (\"0\"+(date.getMonth() + 1)).slice(-2) + '-' + (\"0\"+date.getDate()).slice(-2)\n    doneLists[Object.keys(doneLists).length] = {title:title, date:today, type:'work'}\n    let json = JSON.stringify(doneLists)\n    window.localStorage.setItem('done', json)\n  }\n  render() {\n    return (\n      <div className=\"siimple-box siimple--bg-dark\">\n        <h1 className=\"siimple-box-title siimple--color-white\">Work</h1>\n        <Form message={ this.state.message } handleAdd={this.handleAdd} handleChange={this.handleChange}/>\n        <div className=\"siimple-rule\"></div>\n        <TodoList todos={this.state.todo} handleRemove={this.handleRemove}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport Form from './Form';\nimport TodoList from  './TodoList';\nimport Validation from './Validation';\n\nexport default class Private extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todo: [],\n      info: {\n        title: '',\n      },\n      message: {\n        title: '',\n      }\n    };\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    // LocalStorageから一覧を取得してstateに保存する\n    let lists = window.localStorage.getItem('private')\n    if (lists) {\n      lists = JSON.parse(lists)\n      this.setState({todo: lists});\n    }\n  }\n  handleChange = (e) => {\n    const key = e.target.name;\n    const value = e.target.value;\n    const { info, message } = this.state;\n\n    this.setState({\n      info: { ...info, [key]: value }\n    });\n    this.setState({\n      message: {\n        ...message,\n        [key]: Validation.formValidate(key, value)\n      }\n    });\n  };\n  // データ保存処理\n  handleAdd(e){\n    // リダイレクト防止\n    e.preventDefault();\n    // フォームから受け取ったデータをオブジェクトに挿入して、stateのtodo配列に追加\n    this.state.todo.push({title: e.target.title.value}); // まだ保存されていない\n    // setStateを使ってstateを上書き\n    this.setState({todo: this.state.todo}); // 保存完了\n    // inputのvalueを空に\n    e.target.title.value = '';\n    // JSON形式でLocalStorageに保存する\n    let json = JSON.stringify(this.state.todo)\n    window.localStorage.setItem('private', json)\n  }\n  // データ削除\n  handleRemove(i){\n    // todo配列からi番目から1つ目のデータを除外\n    this.state.todo.splice(i,1);\n    // setStateでtodo配列を上書き\n    this.setState({todo: this.state.todo});\n    // LocalStorageからデータを取得して対象のlistを削除して保存する\n    let privateLists = window.localStorage.getItem('private')\n    privateLists = JSON.parse(privateLists)\n    let targetList = privateLists[i]\n    privateLists.splice(i,1);\n    let json = JSON.stringify(privateLists)\n    window.localStorage.setItem('private', json)\n    this.handleDoneAdd(targetList[\"title\"])\n  }\n  // done追加処理\n  handleDoneAdd(title){\n    let doneLists = window.localStorage.getItem('done')\n    if (!doneLists) {\n      doneLists = []\n    } else {\n      doneLists = JSON.parse(doneLists)\n    }\n    let date = new Date\n    let today = date.getFullYear() + '-' + (\"0\"+(date.getMonth() + 1)).slice(-2) + '-' + (\"0\"+date.getDate()).slice(-2)\n    doneLists[Object.keys(doneLists).length] = {title:title, date:today, type:'private'}\n    let json = JSON.stringify(doneLists)\n    window.localStorage.setItem('done', json)\n  }\n  render() {\n    return (\n      <div className=\"siimple-box siimple--bg-dark\">\n        <h1 className=\"siimple-box-title siimple--color-white\">Private</h1>\n        <Form message={ this.state.message } handleAdd={this.handleAdd} handleChange={this.handleChange}/>\n        <div className=\"siimple-rule\"></div>\n        <TodoList todos={this.state.todo} handleRemove={this.handleRemove}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\r\n\r\nlet btn = { cursor: 'pointer' };\r\nlet isDisplayDate = true\r\nlet todos = []\r\n\r\nconst DoneList = (props) => (\r\n   <div className=\"siimple-box\">\r\n     {props.todos.map((todo, i) => {\r\n       if (i === 0) {\r\n         isDisplayDate = true\r\n       }\r\n       if (i !== 0) {\r\n          if (props.todos[i - 1][\"date\"] === todo[\"date\"]) {\r\n            isDisplayDate = false\r\n          } else {\r\n            isDisplayDate = true\r\n          }\r\n       }\r\n       console.log(isDisplayDate)\r\n       return <div key={i}>{isDisplayDate && <h3 className=\"siimple--color-white\">{todo.date}</h3>}<div key={i} className=\"siimple-list-item siimple--bg-white fs10\">{todo.title} <span className=\"siimple-tag siimple-tag--error siimple-hover\" style={btn} onClick={() => props.handleRemove(i)}>Delete</span></div></div>\r\n     })}\r\n   </div>\r\n);\r\n\r\nexport default DoneList;","import React, { Component } from 'react';\nimport DoneList from  './DoneList';\n\nexport default class Done extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todo: []\n    };\n     this.handleRemove = this.handleRemove.bind(this);\n  }\n  componentDidMount(){\n    // LocalStorageから一覧を取得してstateに保存する\n    let lists = window.localStorage.getItem('done')\n    if (lists) {\n      lists = JSON.parse(lists)\n      lists.sort(function(a,b){\n        if(a.date > b.date) return -1;\n        if(a.date < b.date) return 1;\n        return 0;\n      })\n      this.setState({todo: lists});\n    }\n  }\n  // データ削除\n  handleRemove(i){\n    // todo配列からi番目から1つ目のデータを除外\n    this.state.todo.splice(i,1);\n    // setStateでtodo配列を上書き\n    this.setState({todo: this.state.todo});\n    // LocalStorageからデータを取得して対象のlistを削除して保存する\n    let workLists = window.localStorage.getItem('done')\n    workLists = JSON.parse(workLists)\n    let targetList = workLists[i]\n    workLists.splice(i,1);\n    let json = JSON.stringify(workLists)\n    window.localStorage.setItem('done', json)\n  }\n  render() {\n    return (\n      <div className=\"siimple-box siimple--bg-dark\">\n        <h1 className=\"siimple-box-title siimple--color-white\">Done</h1>\n        <div className=\"siimple-rule\"></div>\n        <DoneList todos={this.state.todo} handleRemove={this.handleRemove}/>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Top from './Top';\nimport Work from './Work';\nimport Private from './Private';\nimport Done from './Done';\n\nlet style = { textDecoration: 'none', color: \"#fff\" };\n\nfunction Headers() {\n  return (\n  <div className=\"siimple-navbar\">\n      {/* <div className=\"siimple--float-left\">\n        <div className=\"siimple-btn siimple-btn--red m-right-5\">\n          <Link to = \"/\" style={style}>TOP</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--orange m-right-5\">\n          <Link to = \"/work\" style={style}>Work</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--yellow m-right-5\">\n          <Link to = \"/private\" style={style}>Private</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--green\">\n          <Link to = \"/done\" style={style}>Done</Link>\n        </div>\n      </div> */}\n      <div className=\"siimple--float-left\">\n        <div className=\"siimple-btn siimple-btn--red m-right-5 fs12\">\n          <Link to = \"/\" style={style}>TOP</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--orange m-right-5 fs12\">\n          <Link to = \"/work\" style={style}>Work</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--yellow m-right-5 fs12\">\n          <Link to = \"/private\" style={style}>Private</Link>\n        </div>\n        <div className=\"siimple-btn siimple-btn--green fs12\">\n          <Link to = \"/done\" style={style}>Done</Link>\n        </div>\n      </div>\n  </div>\n  );\n}\n\nexport default class Menu extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          {Headers()}\n          <Route path=\"/\" exact component={Top}/>\n          <Route path=\"/work\" component={Work}/>\n          <Route path=\"/private\" component={Private}/>\n          <Route path=\"/done\" component={Done}/>\n        </div>\n      </Router>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Menu from './components/Menu';\n\nReactDOM.render(<Menu />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}